import Player from "../gameObjects/Player"
import Princess from "../gameObjects/Princess"
import Debugger from "../gameObjects/Debugger"
import Goomba from "../gameObjects/Goomba"
import Coin from "../gameObjects/Coin"
import StaticObjects from "../gameObjects/StaticObjects"
import Trigger from "../gameObjects/Trigger"
import GameState from "../gameObjects/GameState"
import Dialog from "../gameObjects/Dialog"

import tiles from "../config/tiles"
import generateAnimations from "../config/animations"
import Bubble from "../gameObjects/Bubble"
import Dancer from "../gameObjects/Dancer"

import Mark from "../gameObjects/Mark"
import JoyStick from "../gameObjects/joy"

import data from "../dialogText"

const randomAssetNames = [
    "plane",
    "ship",
    "car",
    "lights",
    "drinks",
    "cameras",
    "food",
    "friends",
    "dj",
    "music",
    "flowers",
    "sunset",
    "dance",
    "family",
    "party",
    "crazy mood"
]
let randomAssetNameIndex = Math.floor(Math.random() * (randomAssetNames.length - 1))
let lastAssetName = undefined

window.mobileCheck = function () {
    let check = false
    ;(function (a) {
        if (
            /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
                a
            ) ||
            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
                a.substr(0, 4)
            )
        )
            check = true
    })(navigator.userAgent || navigator.vendor || window.opera)
    return check
}

class Game extends Phaser.Scene {
    constructor() {
        super("Game")
    }

    // Tileset by https://www.deviantart.com/thecrushedjoycon/art/Super-Mario-Bros-Mega-Tileset-Ver-2-842092790
    // Goombas are from https://mfgg.net/index.php?act=resdb&param=02&c=1&id=4200
    // Mario from https://www.mariomayhem.com/downloads/sprites/super_mario_bros_sprites.php
    // Atlas generated by https://gammafp.github.io/atlas-packer-phaser/editor
    parse_query_string(query) {
        var vars = query.split("&")
        var query_string = {}
        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split("=")
            var key = decodeURIComponent(pair.shift())
            var value = decodeURIComponent(pair.join("="))
            // If first entry with this name
            if (typeof query_string[key] === "undefined") {
                query_string[key] = value
                // If second entry with this name
            } else if (typeof query_string[key] === "string") {
                var arr = [query_string[key], value]
                query_string[key] = arr
                // If third or later entry with this name
            } else {
                query_string[key].push(value)
            }
        }
        return query_string
    }

    preload() {
        var query = window.location.search.substring(1)
        var qs = this.parse_query_string(query)

        if (!qs || !qs.wId || qs.wId !== data.access_code) {
            this.access_code_valid = false
            return
        }

        if (qs && qs.lang && qs.lang === "en") {
            this.textLanguage = "en"
            console.log("lang: en")
        } else {
            this.textLanguage = "gr"
        }

        this.access_code_valid = true

        var progressBar = this.add.graphics()
        var progressBox = this.add.graphics()
        var width = this.cameras.main.width
        var height = this.cameras.main.height

        progressBox.fillStyle(0x222222, 0.8)
        progressBox.fillRect(width / 4, 265, width / 2, 50)

        var loadingText = this.make.text({
            x: width / 2,
            y: height / 2 - 50,
            text: "Loading...",
            style: {
                font: "20px monospace",
                fill: "#ffffff"
            }
        })
        loadingText.setOrigin(0.5, 0.5)

        var percentText = this.make.text({
            x: width / 2,
            y: height / 2 - 5,
            text: "0%",
            style: {
                font: "18px monospace",
                fill: "#ffffff"
            }
        })
        percentText.setOrigin(0.5, 0.5)

        var assetText = this.make.text({
            x: width / 2,
            y: height / 2 + 50,
            text: "",
            style: {
                font: "18px monospace",
                fill: "#ffffff"
            }
        })
        assetText.setOrigin(0.5, 0.5)

        this.load.on("progress", function (value) {
            percentText.setText(parseInt(value * 100) + "%")
            progressBar.clear()
            progressBar.fillStyle(0xffffff, 1)
            progressBar.fillRect(width / 4 + 10, 275, (width / 2 - 20) * value, 30)
        })

        this.load.on("fileprogress", function (file) {
            assetText.setText("Loading asset: " + randomAssetNames[randomAssetNameIndex])

            if (lastAssetName !== file.key) {
                randomAssetNameIndex++
                if (randomAssetNameIndex >= randomAssetNames.length) randomAssetNameIndex = 0
                lastAssetName = file.key
            }
        })

        this.load.image("tiles", "./assets/tiles.png")
        this.load.image("bar-Tiles", "./assets/bar-Tiles.png")
        this.load.image("bar-items", "./assets/bar-2-tiles.png")
        this.load.image("beach-items", "./assets/beach_tileset.png")
        this.load.tilemapTiledJSON("map", "./assets/map.json")
        this.load.atlas("atlas", "./assets/mario-atlas.png", "./assets/mario-atlas.json")
        this.load.atlas("atlasP", "./assets/princess-atlas-2-alt.png", "./assets/princess_atlas_name.json")
        this.load.atlas("atlasDancers", "./assets/dancersAtlas.png", "./assets/dancersAtlas.json")

        this.isDay = "day"
        this.load.image(`background-${this.isDay}-1`, `./assets/background-${this.isDay}-1.png`)
        this.load.image(`background-${this.isDay}-2`, `./assets/background-${this.isDay}-2.png`)
        this.load.image(`background-${this.isDay}-3`, `./assets/background-${this.isDay}-3.png`)
        this.load.image(`background-${this.isDay}-4`, `./assets/background-${this.isDay}-4.png`)
        this.load.image(`background-${this.isDay}-5`, `./assets/background-${this.isDay}-5.png`)

        this.load.audio("main", ["./assets/main.mp3"])
        this.load.audio("jump", ["./assets/jump.wav"])
        this.load.audio("rebound", ["./assets/reboundMusic.mp3"])
        this.load.audio("blip", ["./assets/blip.mp3"])

        this.load.on("complete", () => {
            progressBar.destroy()
            progressBox.destroy()
            loadingText.destroy()
            percentText.destroy()
            assetText.destroy()
            generateAnimations(this)
        })

        this.overlapCollider = undefined
        this.overlapTriggered = false
    }

    create() {
        if (!this.access_code_valid) return

        // const resize = () => {
        //     this.scale.resize(window.innerWidth, window.innerHeight)
        // }

        // window.addEventListener("resize", resize, false)

        const noCollisionTiles = [tiles.EMPTY, tiles.FLAG_LEFT]

        this.map = this.make.tilemap({ key: "map" })

        //non-scrolling
        const width = this.scale.width
        const height = this.scale.height
        this.add.image(width * 0.5, height * 0.5, `background-${this.isDay}-1`).setScrollFactor(0)

        //scrolling
        this.add
            .image(0 + 200, height - 100, `background-${this.isDay}-2`)
            .setOrigin(0, 1)
            .setScrollFactor(0.25)

        this.add
            .image(0 + 300, height - 200, `background-${this.isDay}-3`)
            //.setOrigin(0, 0)
            .setScrollFactor(0.3)

        this.add
            .image(0 + 400, height - 200, `background-${this.isDay}-4`)
            //.setOrigin(0, 0)
            .setScrollFactor(0.4)

        this.add
            .image(0 + 500, height - 200, `background-${this.isDay}-5`)
            //.setOrigin(0, 0)
            .setScrollFactor(0.5)
        //tiles

        this.tileset = this.map.addTilesetImage("map-tileset", "tiles")
        this.barTileset = this.map.addTilesetImage("bar-tiles", "bar-Tiles")
        this.barItemTileset = this.map.addTilesetImage("bar-items-tileset", "bar-items")
        this.beachTileset = this.map.addTilesetImage("beach-tileset", "beach-items")

        this.map.createStaticLayer("background-lvl2-bar", this.barTileset, 0, -16)
        this.map.createStaticLayer("background-lvl2-map", this.tileset, 0, 0)

        this.platform = this.map.createStaticLayer("platform", this.tileset, 0, 0)
        this.ship = this.map.createStaticLayer("ship", this.tileset, 0, 0)
        this.shipBackground = this.map.createStaticLayer("ship-background", this.tileset, 0, 0)

        this.map.createStaticLayer("background", this.tileset, 0, 0)
        this.map.createStaticLayer("beachBar", this.beachTileset, 0, 0)
        this.map.createStaticLayer("beachBar-foreground", this.beachTileset, 0, 0)
        this.map.createStaticLayer("background-bar-tiles", this.barTileset, 0, -16)
        this.map.createStaticLayer("background-bar-tiles-foreground", this.barTileset, 0, -16)
        this.map.createStaticLayer("background-bar-item-tiles", this.barItemTileset, 0, 0)
        this.map.createStaticLayer("background-bar-item-foreground-tiles", this.barItemTileset, 0, 0)
        this.platform.setCollisionByExclusion(noCollisionTiles, true)
        this.ship.setCollisionByExclusion(noCollisionTiles, true)

        this.staticObjects = new StaticObjects(this)

        //this.player = new Player(this, 2070, 210).collideWith(this.platform).collideWith(this.ship)
        this.player = new Player(this, 90, 310).collideWith(this.platform).collideWith(this.ship)
        this.princess = new Princess(this, 2462, 430, "atlasP").collideWith(this.platform).collideWith(this.ship)
        //this.princess = new Princess(this, 284, 310, 'atlasP').collideWith(this.platform).collideWith(this.ship);
        this.goombas = new Goomba(this).collideWith(this.platform)
        this.coins = new Coin(this).collideWith(this.player.sprite)
        // this.debugger = new Debugger(this);
        this.triggers = new Trigger(this).collideWith(this.player.sprite)
        this.bubble = new Bubble(this)
        this.bubble.startAnimation()

        this.inputs = this.input.keyboard.createCursorKeys()

        if (window.mobileCheck()) {
            this.joystick = new JoyStick(
                "joyDiv",
                {
                    title: "joystick",
                    internalFillColor: "#454545",
                    internalLineWidth: 2,
                    internalStrokeColor: "#252525",
                    externalLineWidth: 2,
                    externalStrokeColor: "#454545",
                    autoReturnToCenter: true
                },
                (stickData) => {
                    this.inputs.right.isDown = stickData.x >= 50
                    this.inputs.left.isDown = stickData.x <= -50
                }
            )

            this.joystickJump = new JoyStick(
                "joyDiv2",
                {
                    title: "joystick",
                    internalFillColor: "#454545",
                    internalLineWidth: 2,
                    internalStrokeColor: "#252525",
                    externalLineWidth: 2,
                    externalStrokeColor: "#454545",
                    autoReturnToCenter: true
                },
                (stickData) => {
                    this.inputs.space.isDown = stickData.y >= 50
                }
            )
        }

        this.shipTargetX = 540
        this.shipGoesDown = true

        this.dialog = new Dialog(this)

        this.finaleInitialized = false

        this.musicMain = this.sound.add("main")
        this.musicRebound = this.sound.add("rebound")
        this.musicMain.play()
        this.musicRebound.play()
    }

    moveMark(mark) {
        if (mark.getTicks() % 4 === 0) {
            mark.sprt.x += mark.markGoesRight ? 1 : -1
        }

        if (mark.getTicks() % 40 === 0) {
            mark.markGoesRight = !mark.markGoesRight
        }

        if (mark.getTicks() % 8 === 0) {
            mark.sprt.y -= 1
        }

        if (mark.getTicks() % 150 === 0) mark.sprt.setVisible(false)
    }

    syncAudio(playerPositionX, playerPositionY) {
        if (
            GameState.currentStateIndex >= 2 || // hardcoded for simplicity...
            (playerPositionX >= 1930 && playerPositionX < 2000 && playerPositionY > 230) ||
            (playerPositionX >= 2000 && playerPositionX < 2050 && playerPositionY > 236) ||
            (playerPositionX >= 2050 && playerPositionX < 2637 && playerPositionY > 280) ||
            (playerPositionX >= 2637 && playerPositionX < 2910 && playerPositionY > 306)
        ) {
            if (this.musicMain.isPlaying) this.musicMain.pause()
            if (!this.musicRebound.isPlaying) this.musicRebound.resume()
        } else {
            if (!this.musicMain.isPlaying) this.musicMain.resume()
            if (this.musicRebound.isPlaying) this.musicRebound.pause()
        }
    }

    update(time, delta) {
        this.player.update(this.inputs)
        this.princess.update(this.inputs)
        this.goombas.update()
        this.coins.update()

        if (this.dancers) {
            for (const dancer of this.dancers) {
                dancer.update()
            }
        }

        this.syncAudio(this.player.sprite.x, this.player.sprite.y)

        if (GameState.getCurrentGameState() === GameState.StateReboundDancing) {
            if (!this.mark1 || !this.mark2) {
                this.mark1 = new Mark(this, 2429)
                this.mark2 = new Mark(this, 2452)
            } else {
                this.mark1.update()
                this.mark2.update()

                this.moveMark(this.mark1)
                this.moveMark(this.mark2)
            }
        } else if (GameState.getCurrentGameState() === GameState.StateOnShipPrincess) {
            this.ship.x += 1
            this.shipBackground.x += 1

            let speedCorrection = 1000 / 60 / delta
            this.player.sprite.setVelocityX(60 * speedCorrection)
            this.princess.sprite.setVelocityX(60 * speedCorrection)

            if (this.ship.x >= this.shipTargetX) {
                this.player.sprite.setVelocityX(0)
                this.princess.sprite.setVelocityX(0)
                GameState.goToNextState()
            }
            if (this.ship.x % 8 === 0 && (this.ship.x < 485 || this.ship.y !== 0)) {
                this.ship.y += this.shipGoesDown ? 1 : -1
                this.shipBackground.y += this.shipGoesDown ? 1 : -1
            }
            if (this.ship.x % 40 === 0) {
                this.shipGoesDown = !this.shipGoesDown
            }

            this.shipYState++
        } else if (GameState.getCurrentGameState() === GameState.StateFinale) {
            if (!this.finaleInitialized) {
                this.dialog.init()
                let textContent = this.textLanguage === "en" ? data.text_en : data.text
                this.dialog.setText(textContent, true)
                this.finaleInitialized = true

                this.dancers = [
                    new Dancer(this, 3687, 250, "atlasDancers", "luigiWalk", "luigiDance", 4224)
                        .collideWith(this.platform)
                        .collideWith(this.ship),
                    new Dancer(this, 3740, 250, "atlasDancers", "mushWalk", "mushDance", 4255)
                        .collideWith(this.platform)
                        .collideWith(this.ship),
                    new Dancer(this, 3812, 250, "atlasDancers", "barioWalk", "barioDance", 4096)
                        .collideWith(this.platform)
                        .collideWith(this.ship),
                    new Dancer(this, 3780, 250, "atlas", "goombaRun", "goombaRun", 4300)
                        .collideWith(this.platform)
                        .collideWith(this.ship),
                    new Dancer(this, 3710, 250, "atlas", "goombaRun", "goombaRun", 4000)
                        .collideWith(this.platform)
                        .collideWith(this.ship)
                ]
            }
        }
    }

    trigger() {}
}

export default Game
